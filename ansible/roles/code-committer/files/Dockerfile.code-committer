ARG UBUNTU_VERSION=22.04
FROM ubuntu:${UBUNTU_VERSION}
ARG USER_NAME=ywen
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG HOST_GPG_SIGNING_SUBKEY_FILE_NAME="sub_signing.key"
ARG HOST_SSH_PRIVATE_KEY_FILE_NAME="id_rsa"
ARG LOCALE="en_US.UTF-8"
ARG LANGUAGE="en_US"
ARG GIT_USER_EMAIL
ARG GIT_USER_NAME
ARG TZ=Etc/UTC

# The name of this code committer (e.g., 'personal').
ARG COMMITTER_NAME

RUN groupadd -g ${GROUP_ID} ${USER_NAME} && \
    useradd -r --create-home -u ${USER_ID} -g ${USER_NAME} ${USER_NAME}

# NOTE: As of 2020-06-01, we still use `apt-get` because `apt` would
# report the warning of "apt does not have a stable CLI interface. Use
# with caution in scripts."

RUN apt-get update

RUN DEBIAN_FRONTEND=noninteractive apt-get -y install \
    software-properties-common

# Add the Git PPA so we can install the latest version.
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository \
    ppa:git-core/ppa

RUN apt-get update

# Install the fundamentally needed packages.
RUN DEBIAN_FRONTEND=noninteractive apt-get -y install \
    bash-completion \
    git \
    gpg \
    locales \
    openssh-server \
    openssh-client

# Install git repository utilities.
RUN apt-get -y install \
    git-filter-repo \
    pre-commit

# Install additional utilities.
RUN apt-get -y install \
    tree \
    vim

# Generate and set the locale to UTF-8.
RUN locale-gen ${LOCALE}
ENV LANG ${LOCALE}
ENV LC_ALL ${LOCALE}
ENV LANGUAGE ${LANGUAGE}

# Set the timezone.
RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime
RUN echo ${TZ} > /etc/timezone

# Switch to the non-root user.
USER ${USER_NAME}

# Configure git.
# NOTE(ywen): Must double-quote the variables to get them interpolated.
RUN git config --global user.email "${GIT_USER_EMAIL}"
RUN git config --global user.name "${GIT_USER_NAME}"
RUN git config --global log.showSignature true
RUN git config --global alias.list \
    "log --format='%C(auto)%h %aI %<(8)%aN [%G?] %s%d' --no-show-signature"
RUN git config --global core.quotepath false

# Configure the CLI prompt.
RUN echo "export PS1=\"(${COMMITTER_NAME}) \$PS1\"" >> \
    /home/${USER_NAME}/.bashrc

# Copy the SSH private key.
RUN mkdir -pv /home/${USER_NAME}/.ssh
COPY --chown=${USER_ID}:${GROUP_ID} \
    ${HOST_SSH_PRIVATE_KEY_FILE_NAME} /home/${USER_NAME}/.ssh/id_rsa

# The SSH private key must be only accessible to the owner, hence 600.
RUN chmod 600 /home/${USER_NAME}/.ssh/id_rsa

# Import the signing subkey.
COPY --chown=${USER_ID}:${GROUP_ID} \
    ${HOST_GPG_SIGNING_SUBKEY_FILE_NAME} /tmp/sub_signing.key
RUN chmod 600 /tmp/sub_signing.key
RUN gpg --batch --import /tmp/sub_signing.key

# Configure the GPG TTY.
RUN echo "export GPG_TTY=\"\$(tty)\"" >> /home/${USER_NAME}/.bashrc

# Configure git to use the signing key.
RUN gpg --list-secret-keys --with-colons > /tmp/GPG_KEYS
RUN grep --max-count 1 "ssb:-:.*::s::" /tmp/GPG_KEYS > /tmp/GPG_KEYS_SIGNING
RUN cut -d ":" -f 5 /tmp/GPG_KEYS_SIGNING > /tmp/GPG_KEYS_SIGNING_ID
RUN xargs -a /tmp/GPG_KEYS_SIGNING_ID -I'{}' \
    git config --global user.signingkey {}

# Automatically set up SSH agent when logging into the container.
COPY --chown=${USER_ID}:${GROUP_ID} \
    bashrc.ssh-agent /home/${USER_NAME}/.bashrc.ssh-agent
RUN echo "test -f "\$HOME/.bashrc.ssh-agent" && . "\$HOME/.bashrc.ssh-agent"" >> \
    /home/${USER_NAME}/.bashrc

WORKDIR /home/${USER_NAME}/code
