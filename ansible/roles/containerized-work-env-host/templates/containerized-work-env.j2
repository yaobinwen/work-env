#!/bin/sh

T=$(mktemp -d -t "{{containerized_work_env_container_name}}.XXXXXXXX") || exit

cleanup() {
    rm -fr "$T" || echo "WARNING: cleanup() failed" >&2
}
trap cleanup EXIT INT TERM

usage() {
    local SCRIPT="$(basename "$0")" || return

    cat <<__EOS__
$SCRIPT <COMMAND>

COMMAND:

    start   Start the Docker container '{{containerized_work_env_container_name}}'
    login   Log into the Docker container '{{containerized_work_env_container_name}}'
    stop    Stop the Docker container '{{containerized_work_env_container_name}}'
__EOS__
}

test $# -eq 1 || {
    echo "Expect exactly one argument but get $#: $@" || exit
    usage
    exit 1
}

cmd_start() {
    local NUM

    docker container ls --filter "Name={{containerized_work_env_container_name}}" --format "\{\{.ID\}\}" > "$T/cid" || return
    NUM=$(wc -l < "$T/cid") || return

    if [ $NUM -eq 1 ]; then
        echo "Container '{{containerized_work_env_container_name}}' was already created." || return
        return
    fi

    rm -f /tmp/cid.{{containerized_work_env_container_name}} || return

    docker run \
        --name {{containerized_work_env_container_name}} \
        --cidfile /tmp/cid.{{containerized_work_env_container_name}} \
        --detach \
        --rm \
        -it \
        --mount type=bind,source=/etc/timezone,destination=/etc/timezone,readonly \
        --mount type=bind,source=/etc/localtime,destination=/etc/localtime,readonly \
        --mount type=bind,source={{home_path_on_host}}/.aws,destination=/home/{{containerized_work_env_user_name}}/.aws,readonly \
        --mount type=bind,source={{home_path_on_host}}/.gnupg,destination=/home/{{containerized_work_env_user_name}}/.gnupg \
        --mount type=bind,source={{home_path_on_host}}/.gpg,destination=/home/{{containerized_work_env_user_name}}/.gpg,readonly \
        --mount type=bind,source={{home_path_on_host}}/.ssh,destination=/home/{{containerized_work_env_user_name}}/.ssh \
        --mount type=bind,source={{home_path_on_host}}/code,destination=/home/{{containerized_work_env_user_name}}/code \
        --mount type=bind,source={{home_path_on_host}}/upstreams,destination=/home/{{containerized_work_env_user_name}}/upstreams \
        --mount type=bind,source={{home_path_on_host}}/.tmux.conf,destination=/home/{{containerized_work_env_user_name}}/.tmux.conf \
        {{containerized_work_env_image_name}}:{{containerized_work_env_image_version}} \
        /bin/bash || return
}

cmd_stop() {
    docker stop {{containerized_work_env_container_name}} || return
}

cmd_login() {
  cmd_start || return

    docker exec \
        -it \
        {{containerized_work_env_container_name}} \
        /bin/bash || return
}

# Handle the sub-command.
case "$1" in
  start)
    cmd_start
    exit
    ;;
  stop)
    cmd_stop
    exit
    ;;
  login)
    cmd_login
    exit
    ;;
  *)
    echo "Unknown command: $1"
    exit 1
    ;;
esac
